#BlueJ class context
comment0.params=driver\ columns
comment0.target=Relation(Driver,\ java.lang.String[])
comment0.text=\n\ Creates\ a\ relation\ with\ list\ of\ columns\ and\ current\ driver.\n\ Used\ internally\ by\ model/Driver.\ Don't\ use\ this\ in\ consumer.\n\ \n\ @param\ \ driver\ \ \ the\ driver\ hosting\ the\ Relation\n\ @param\ \ columns\ \ an\ array\ of\ columns\ to\ become\ the\ default\ Relation\ projection\n
comment1.params=
comment1.target=Relation\ clone()
comment1.text=\n\ Copies\ the\ relation\ to\ a\ new\ object.\n
comment10.params=
comment10.target=Relation\ distinct()
comment10.text=\n\ Overloaded\:\ Restricts\ row\ output\ to\ distinct\ rows.\ Uses\ whole\ row\ for\ search\ index.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment11.params=columns
comment11.target=Relation\ distinct(java.lang.String[])
comment11.text=\n\ Overloaded\:\ Restricts\ row\ output\ to\ distinct\ rows.\ Provide\ search\ columns\ to\ use\ as\ index\ key.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment12.params=columns
comment12.target=Relation\ sort(java.lang.String[])
comment12.text=\n\ Sorts\ row\ output\ by\ sort\ columns\ used\ as\ index\ key.\ Materializes\ view\ in\ memory,\ be\ sure\n\ to\ limit\ projection\ prior\ to\ sorting.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment13.params=
comment13.target=Relation\ reverse()
comment13.text=\n\ Reverses\ row\ output.\ Materializes\ view\ in\ memory,\ be\ sure\ to\ limit\ projection\ prior\ to\ sorting.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment14.params=rowsToSkip
comment14.target=Relation\ skip(int)
comment14.text=\n\ Skips\ the\ number\ of\ rows\ specified.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment15.params=rowsToAllow
comment15.target=Relation\ limit(int)
comment15.text=\n\ Allows\ the\ number\ of\ rows\ specified.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment16.params=countColumn
comment16.target=Relation\ count(java.lang.String)
comment16.text=\n\ Counts\ output\ rows\ into\ a\ column\ as\ specified.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment17.params=
comment17.target=Row\ next()
comment17.text=\n\ Gets\ the\ next\ Row.\n\ \n\ @return\ \ Row\ or\ null\ when\ no\ more\ rows.\n
comment18.params=
comment18.target=int\ rowsReturned()
comment18.text=\n\ Gets\ the\ number\ of\ rows\ returned.\n\ \n\ @return\ \ The\ number\ of\ rows\ returned\ so\ far.\n
comment19.params=
comment19.target=void\ rewind()
comment19.text=\n\ Rewinds\ back\ to\ the\ beginning\ of\ the\ data\ set.\n
comment2.params=
comment2.target=java.lang.String[]\ getColumns()
comment2.text=\n\ Gets\ the\ projected/filtered\ columns.\n\ \n\ @return\ \ String\ with\ column\ name\n
comment20.params=
comment20.target=void\ close()
comment3.params=index
comment3.target=java.lang.String\ getColumn(int)
comment3.text=\n\ Gets\ the\ projected/filtered\ column\ name\ at\ index.\n\ \n\ @param\ \ index\ \ \ the\ column\ index\ to\ retrieve\ name\n\ @return\ \ String\ with\ column\ name\n
comment4.params=name
comment4.target=int\ getColumnIndex(java.lang.String)
comment4.text=\n\ Gets\ the\ projected/filtered\ column\ index\ at\ name.\n\ \n\ @param\ \ index\ \ \ the\ column\ index\ to\ retrieve\ name\n\ @return\ \ Column\ index\ or\ -1\ if\ not\ found\n
comment5.params=
comment5.target=int\ columnCount()
comment5.text=\n\ Returns\ the\ projected/filtered\ number\ of\ columns.\n
comment6.params=
comment6.target=java.util.ArrayList\ getFilters()
comment6.text=\n\ Gets\ the\ list\ of\ filters.\n
comment7.params=columns
comment7.target=Relation\ project(java.lang.String[])
comment7.text=\n\ Limits\ the\ columns\ (and\ column\ order)\ in\ the\ projection.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment8.params=column\ validValues
comment8.target=Relation\ restrict(java.lang.String,\ java.lang.String[])
comment8.text=\n\ Restricts\ row\ output\ on\ a\ column\ where\ cell\ values\ are\ valid.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
comment9.params=column\ blockValues
comment9.target=Relation\ omit(java.lang.String,\ java.lang.String[])
comment9.text=\n\ Omits\ row\ output\ on\ a\ column\ where\ cell\ values\ are\ valid.\n\ \n\ @return\ \ The\ Relation\ object\ so\ daisy-chaining\ operations\ is\ easier\ to\ code.\n
numComments=21
