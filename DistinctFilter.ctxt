#BlueJ class context
comment0.params=columns
comment0.target=DistinctFilter(java.lang.String[])
comment0.text=\n\ Creates\ a\ DistinctFilter\ that\ makes\ sure\ each\ row\ (as\ a\ whole)\ is\ unique.\ All\ cells\ are\ tested\n\ against\ all\ cells\ in\ all\ rows.\n
comment1.params=columns\ indexedColumns
comment1.target=DistinctFilter(java.lang.String[],\ java.lang.String[])
comment1.text=\n\ Creates\ a\ DistinctFilter\ that\ makes\ sure\ each\ row\ (as\ a\ whole)\ is\ unique.\ All\ indexed\ column\n\ cells\ are\ tested\ against\ prior\ indexed\ cells\ from\ all\ rows\ before\ them.\n
comment2.params=
comment2.target=DistinctFilter\ clone()
comment2.text=\n\ Copies\ the\ filter.\n
comment3.params=name
comment3.target=int\ getActualColumnIndex(java.lang.String)
comment3.text=\n\ Helper\:\ Gets\ the\ actual\ column\ index\ at\ name\ (before\ the\ projection\ is\ limited).\n\ \n\ @param\ \ index\ \ \ the\ column\ index\ to\ retrieve\ name\n\ @return\ \ Column\ index\ or\ -1\ if\ not\ found\n
comment4.params=row
comment4.target=java.lang.String\ generateRowKey(Row)
comment4.text=\n\ Returns\ a\ string\ with\ each\ cell\ seperated\ by\ tildes.\n
comment5.params=
comment5.target=java.lang.String[]\ getColumns()
comment5.text=\n\ Gets\ the\ column\ names\ provided\ when\ the\ filter\ was\ initialized.\n
comment6.params=row
comment6.target=Row\ transformRow(Row)
comment6.text=\n\ Returns\ the\ row\ back\ out\ as\ is.\n
comment7.params=row
comment7.target=boolean\ isRowSkipped(Row)
comment7.text=\n\ Checks\ to\ see\ if\ this\ row\ has\ already\ been\ used\ will\ be\ valid.\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ Describes\ the\ filter\ in\ terms\ of\ Java.\n
numComments=9
